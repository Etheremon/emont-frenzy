(***************************************************)
(*               Associated library                *)
(***************************************************)
library EmontFrenzy

(* constant value *)
let const_one = Int32 1
let const_zero = Int32 0
let const_minus = Int32 -1

(* standard methods *)

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let logic_and =
    fun (a : Bool) =>
    fun (b : Bool) =>
        match b with
        | True =>
            match a with
            | True =>
                True
            | False =>
                False
            end
        | False =>
            False
        end

let gte =
    fun (a : Int32) =>
    fun (b : Int32) =>
        let lt_res = builtin lt a b in
        match lt_res with
        | False => True
        | True => False
        end

let abs_int =
    fun (a : Int32) =>
        let a_sign = gte a const_zero in
        match a_sign with
        | True => a
        | False =>
            let minus_a = builtin mul minus_a a in
            minus_a
        end

let abs_sub_int =
    fun (a : Int32) =>
    fun (b: Int32) =>
        let asubb = builtin sub a b in
        abs_int asubb

let get_min_int =
    fun (a : Int32) =>
    fun (b : Int32) =>
        let a_lt_b = builtin lt a b in
        match a_lt_b with
        | True => a
        | False => b
        end

let get_max_int =
    fun (a : Int32) =>
    fun (b : Int32) =>
        let a_lt_b = builtin lt a b in
        match a_lt_b with
        | True => b
        | False => a
        end

(* frenzy methods *)

let get_max_move =
    fun (weight : Int32) =>
        let const_10 = Int32 10 in
        let const_20 = Int32 20 in
        let const_30 = Int32 30 in
        let const_5 = Int32 5 in
        let const_4 = Int32 4 in
        let const_3 = Int32 3 in
        let const_2 = Int32 2 in
        let lt_10 = builtin lt weight const_10 in
        let lt_20 = builtin lt weight const_20 in
        let lt_30 = builtin lt weight const_30 in
        match lt_10 with
        | True => const_5
        | False =>
            match lt_20 with
            | True => const_4
            | False =>
                match lt_30 with
                | True => const_3
                | False => const_2
                end
            end
        end


(* default values *)
let default_ocean_size = Int32 30
let default_fish_price = Int32 5
let default_fish_weight = Int32 5
let default_fish_pos_x = Int32 10
let default_fish_pos_y = Int32 5
let default_fish_max = Int32 20

(* message codes *)
let not_owner_code = Int32 1
let set_ocean_size = Int32 2
let set_fish_price = Int32 3
let buy_fish = Int32 4
let invalid_amount = Int32 5
let fish_not_exist = Int32 6
let invalid_move = Int32 7
let move_fish = Int32 8


(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract EmontFrenzy
(owner: Address)

field __ocean_size : Int32 = default_ocean_size
field __fish_price : Int128 = default_fish_price

(* Fish struct, to be refactor *)
field __total_fish_no : Int32 = const_one
field __fish_to_player : Map Int32 Address = Emp Int32 Address
field __player_to_fish : Map Address Int32 = Emp Address Int32
field __fish_to_weight: Map Int32 Int32 = Emp Int32 Int32
field __fish_to_pos_x: Map Int32 Int32 = Emp Int32 Int32
field __fish_to_pos_y: Map Int32 Int32 = Emp Int32 Int32


transition setOceanSize (new_ocean_size : Int32)
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : not_owner_code};
    msgs = one_msg msg;
    send msgs
  | True =>
    __total_fish_no := new_ocean_size;
    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : set_ocean_size};
    msgs = one_msg msg;
    send msgs
  end
end


transition setFishPrice (new_fish_price : Int128)
    is_owner = builtin eq owner _sender;
    match is_owner with
    | False =>
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : not_owner_code};
        msgs = one_msg msg;
        send msgs
    | True =>
        __fish_price := new_fish_price;
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : set_fish_price};
        msgs = one_msg msg;
        send msgs
    end
end

transition buyFish ()
    is_valid_amount = builtin eq _amount __fish_price;
    match is_valid_amount with
    | False =>
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : invalid_amount};
        msgs = one_msg msg;
        send msgs
    | True =>
        new_total_fish_no = builtin add __total_fish_no const_one;
        __total_fish_no := new_total_fish_no;
        new_fish_to_player = builtin put __fish_to_player new_total_fish_no _sender;
        __fish_to_player := new_fish_to_player;
        new_fish_to_weight = builtin put __fish_to_weight new_total_fish_no default_fish_weight;
        __fish_to_weight := new_fish_to_weight;
        new_fish_to_posx = builtin put __fish_to_weight new_total_fish_no default_fish_pos_x;
        __fish_to_pos_x := new_fish_to_pos_x;
        new_fish_to_posy = builtin put __fish_to_weight new_total_fish_no default_fish_pos_y;
        __fish_to_pos_y := new_fish_to_pos_y;
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : buy_fish};
        msgs = one_msg msg;
        send msgs
    end
end

transition moveFish (new_fish_x : Int32, new_fish_y : Int32)
    fish_num = get __player_to_fish _sender;
    match fish_num with
    | None =>
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : fish_not_exist};
        msgs = one_msg msg;
        send msgs
    | Some fish_num_v =>
        fish_weight = get __fish_to_weight fish_num_v;
        valid_move = get_max_move fish_weight;
        fish_x = get __fish_to_pos_x fish_num_v;
        fish_y = get __fish_to_pos_y fish_num_v;
        diff_x = abs_sub_int fish_x new_fish_x;
        diff_y = abs_sub_int fish_x new_fish_y;
        max_diff = get_max_int diff_x diff_y;
        is_valid_move = gte valid_move max_diff;
        match is_valid_move with
        | True =>
            new_fish_to_pos_x = builtin put __fish_to_pos_x new_fish_x;
            new_fish_to_pos_y = builtin put __fish_to_pos_y new_fish_y;
            msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : move_fish};
            msgs = one_msg msg;
            send msgs
        | False =>
            msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : invalid_move};
            msgs = one_msg msg;
            send msgs
        end
    end
end