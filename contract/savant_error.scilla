(***************************************************)
(*               Associated library                *)
(***************************************************)
library EmontFrenzy

(* constant value *)
let const_one = Uint128 1
let const_zero = Uint128 0
let const_max_x = Uint128 1000
let nil = Nil {Uint128}

(* default values *)
let default_ocean_size = Uint128 20
let default_fish_price = Uint128 5
let default_fish_weight = Uint128 20000
let default_fish_reduction = Uint128 950
let min_bait_size = Uint128 1000

(* message codes *)
let code_debug = Uint128 0
let code_not_owner = Uint128 1
let code_set_ocean_size = Uint128 2
let code_set_fish_price = Uint128 3
let code_buy_fish = Uint128 4
let code_invalid_amount = Uint128 5
let code_fish_not_exist = Uint128 6
let code_invalid_move = Uint128 7
let code_move_fish = Uint128 8
let code_eat_fish = Uint128 9
let code_fish_eaten = Uint128 10
let code_eat_bait = Uint128 11
let code_set_bait = Uint128 12
let code_unknown_error = Uint128 500

(* standard methods *)

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let logic_and =
    fun (a : Bool) =>
    fun (b : Bool) =>
        match b with
        | True =>
            match a with
            | True =>
                True
            | False =>
                False
            end
        | False =>
            False
        end

let gte =
    fun (a : Uint128) =>
    fun (b : Uint128) =>
        let lt_res = builtin lt a b in
        match lt_res with
        | False => True
        | True => False
        end

let lte =
    fun (a : Uint128) =>
    fun (b : Uint128) =>
        let lt_res = builtin lt a b in
        match lt_res with
        | False =>
            let eq_res = builtin eq a b in
            eq_res
        | True => True
        end

let abs_sub =
    fun (a : Uint128) =>
    fun (b: Uint128) =>
        let a_gte_b = gte a b in
        match a_gte_b with
        | True =>
            let res = builtin sub a b in
                res
        | False =>
            let res = builtin sub b a in
                res
        end

let get_min_int =
    fun (a : Uint128) =>
    fun (b : Uint128) =>
        let a_lt_b = builtin lt a b in
        match a_lt_b with
        | True => a
        | False => b
        end

let get_max_int =
    fun (a : Uint128) =>
    fun (b : Uint128) =>
        let a_lt_b = builtin lt a b in
        match a_lt_b with
        | True => b
        | False => a
        end

let nat_to_int =
  fun (n : Nat) =>
    let f =
      fun (z : Uint128) =>
      fun (n : Nat) =>
        match n with
        | _ =>
          let one_int = Uint128 1 in
          builtin add z one_int
        end
    in
    let folder = @nat_fold Uint128 in
    let zero_int = Uint128 0 in
      folder f zero_int n

let gen_list = fun (n : Nat) =>
    let iter_fun =
        fun (res : List Uint128) => fun (n: Nat) =>
            let int_n = nat_to_int n in
                let res_2 = Cons {Uint128} int_n res in
                res_2
        in
    let zero = Uint128 0 in
    let one = Uint128 1 in
    let init_val = Nil {Uint128} in
    let typed_folder = @nat_fold (List Uint128) in
    let folder = typed_folder iter_fun init_val in
    let res = folder n in
    res

let list_nth =
  tfun 'A =>
  fun (n_h : Uint128) =>
  fun (l_h : List 'A) =>
    let list_nth_helper =
      tfun 'A =>
      fun (n : Uint128) =>
      fun (l : List 'A) =>
        let folder = @list_foldl 'A (Pair Uint128 (Option 'A)) in
        let zero = Uint128 0 in
        let none = None {'A} in
        let init = Pair {Uint128 (Option 'A)} zero none in
        let iter =
          fun (z : Pair Uint128 (Option 'A)) =>
          fun (h : 'A) =>
            match z with
            | Pair i oe =>
              let one = Uint128 1 in
              let nexti = builtin add i one in
              let this = builtin eq n i in
              match this with
              | True =>
                let someh = Some {'A} h in
                Pair {Uint128 (Option 'A)} nexti someh
              | False =>
                Pair {Uint128 (Option 'A)} nexti oe
              end
            end
          in
          folder iter init l
    in
    let nth = @list_nth_helper 'A in
    let res = nth n_h l_h in
    match res with
    | Pair i oe =>
      oe
    end

let list_length =
  tfun 'A =>
  fun (l : List 'A) =>
    let folder = @list_foldr 'A Uint128 in
    let init = Uint128 0 in
    let iter =
      fun (h : 'A) =>
      fun (z : Uint128) =>
        let one = Uint128 1 in
          builtin add one z
     in
       folder iter init l

let pair_1st =
  fun (p : Pair Int Int) =>
    match p with
    | Pair a b => a
    end

let pair_2nd =
  fun (p : Pair Int Int) =>
    match p with
    | Pair a b => b
    end

let stupid_mod =
    fun (n : Uint128) =>
    fun (mod : Uint128) =>
        let res = n in
        let const_100 = Uint128 100 in
        let nat_100 = builtin to_nat const_100 in
        let l = gen_list nat_100 in
        let folder = @list_foldl Uint128 Uint128 in
        let iter =
            fun (sink : Uint128) =>
            fun (i : Uint128) =>
                let is_gte = gte sink mod in
                match is_gte with
                | True =>
                    let sink_new = builtin sub sink mod in
                    sink_new
                | False =>
                    sink
                end
        in
        folder iter res l

let pseudo_ran =
    fun (n : Uint128) =>
        let prime_1 = Uint128 1373 in
        let prime_2 = Uint128 1049 in
            let prod_1 = builtin mul n prime_1 in
            let res = builtin rem prod_1 prime_2 in
                res


(**************** frenzy methods *************)

let get_max_move =
    fun (weight : Uint128) =>
        let const_10 = Uint128 10 in
        let const_20 = Uint128 20 in
        let const_30 = Uint128 30 in
        let const_25 = Uint128 25 in
        let const_16 = Uint128 16 in
        let const_9 = Uint128 9 in
        let const_4 = Uint128 4 in
        let lt_10 = builtin lt weight const_10 in
        let lt_20 = builtin lt weight const_20 in
        let lt_30 = builtin lt weight const_30 in
        match lt_10 with
        | True => const_25
        | False =>
            match lt_20 with
            | True => const_16
            | False =>
                match lt_30 with
                | True => const_9
                | False => const_25
                end
            end
        end

let in_border =
    fun (border_x : Uint128) =>
    fun (border_y : Uint128) =>
    fun (x : Uint128) =>
    fun (y : Uint128) =>
        let x_lt_bx = builtin lt x border_x in
        let x_gte_0 = gte x const_zero in
        let x_good = logic_and x_lt_bx x_gte_0 in

        let y_lt_by = builtin lt y border_y in
        let y_gte_0 = gte y const_zero in
        let y_good = logic_and y_lt_by y_gte_0 in

        let good = logic_and x_good y_good in
        good

let get_comb_pos =
    fun (pos_x: Uint128) =>
    fun (pos_y: Uint128) =>
        let sum_1 = builtin mul pos_x const_max_x in
        let sum_2 = builtin add sum_1 pos_y in
        sum_2

let get_empty_cell_list =
    fun (pos_fish_map : Map Uint128 Uint128) =>
    fun (pos_bait_map : Map Uint128 Uint128) =>
    fun (size_x : Uint128) =>
    fun (size_y : Uint128) =>
        let l = Nil {(Pair Uint128 Uint128)} in

        let nat_size_x = builtin to_nat size_x in
            let list_x = gen_list nat_size_x in

        let nat_size_y = builtin to_nat size_y in
            let list_y = gen_list nat_size_y in

        let folder_x = @list_foldl Uint128 Uint128 in
        let iter_x =
            fun (l : List (Pair Uint128 Uint128)) =>
            fun (x : Uint128) =>
                let folder_y = @list_foldl Uint128 Uint128 in
                let iter_y =
                    fun (l_y : List (Pair Uint128 Uint128)) =>
                    fun (y : Uint128) =>
                        let comb_pos = get_comb_pos x y in
                        let fish = builtin get pos_fish_map comb_pos in
                        match fish with
                        | None =>
                            let bait = builtin get pos_bait_map comb_pos in
                            match bait with
                            | None =>
                                let pair_x_y = Pair {Uint128 Uint128} x y in
                                let l_y_new = Cons {(Pair Uint128 Uint128)} pair_x_y l_y in
                                    l_y_new
                            | Some bait_v => l_y
                            end
                        | Some fish_num => l_y
                        end
                in
                    folder_y iter_y l list_y
            in
                folder_x iter_x l list_x

let get_random_empty_cell =
    fun (pos_fish_map : Map Uint128 Uint128) =>
    fun (pos_bait_map : Map Uint128 Uint128) =>
    fun (size_x : Uint128) =>
    fun (size_y : Uint128) =>
    fun (block_num : Uint128) =>
        let list_cells = get_empty_cell_list pos_fish_map pos_bait_map size_x size_y in
        let list_length_int32 = @list_length Uint128 in
        let empty_cell_count = list_length_int32 list_cells in
        let block_num_rand = pseudo_ran block_num in
        let random_cell_num = builtin rem block_num_rand empty_cell_count in
        let list_nth_int = @list_nth (Pair Uint128 Uint128) in
        let random_cell = list_nth_int random_cell_num list_cells in
            random_cell

let get_reduced_fish_size =
    fun (fish_size: Uint128) =>
        let new_fish_size = builtin mul fish_size default_fish_reduction in
            let const_1000 = Uint128 1000 in
            let new_fish_size = builtin div new_fish_size const_1000 in
                new_fish_size


(***************************************************)
(*             The contract definition             *)
(***************************************************)
(*    To do:*)
(*    - [x] Handle logic when fish eat fish*)
(*    - [x] Library for Loop and look for empty space*)
(*    - [x] Put new fish in random location*)
(*    - [x] Distribute drops*)
(*    - [] Handle ocean resize*)

contract EmontFrenzy
(owner: Address)

field __ocean_size : Uint128 = default_ocean_size
field __fish_price : Uint128 = default_fish_price

(* Fish struct, to be refactor *)
field __total_fish_no : Uint128 = const_zero
field __active_fish_no : Uint128 = const_zero
field __acc_bait_size : Uint128 = const_zero
field __fish_to_player : Map Uint128 Address = Emp Uint128 Address
field __player_to_fish : Map Address Uint128 = Emp Address Uint128
field __fish_to_weight: Map Uint128 Uint128 = Emp Uint128 Uint128
field __fish_to_posx: Map Uint128 Uint128 = Emp Uint128 Uint128
field __fish_to_posy: Map Uint128 Uint128 = Emp Uint128 Uint128
field __pos_to_fish: Map Uint128 Uint128 = Emp Uint128 Uint128
field __pos_to_bait: Map Uint128 Uint128 = Emp Uint128 Uint128

(* debugger *)
field __error_count : Uint128 = const_zero
field __valid_amount : Bool = False
field __call_count : Uint128 = const_zero
field __fold_res : Uint128 = const_zero
field __test_list : List Uint128 = Nil {Uint128}
field __empty_count : Uint128 = const_zero
field __test_result : Uint128 = const_zero
field __random_cell : Pair Uint128 Uint128 = Pair {Uint128 Uint128} const_zero const_zero


transition setOceanSize (new_ocean_size : Uint128)
    is_owner = builtin eq owner _sender;
    match is_owner with
    | False =>
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_not_owner};
        msgs = one_msg msg;
        send msgs
    | True =>
        __ocean_size := new_ocean_size;
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_set_ocean_size};
        msgs = one_msg msg;
        send msgs
    end
end


transition setFishPrice (new_fish_price : Int128)
    is_owner = builtin eq owner _sender;
    match is_owner with
    | False =>
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_not_owner};
        msgs = one_msg msg;
        send msgs
    | True =>
        __fish_price := new_fish_price;
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_set_fish_price};
        msgs = one_msg msg;
        send msgs
    end
end

transition setBait (seed: Uint128, bait_size : Uint128)
    is_owner = builtin eq owner _sender;
    match is_owner with
    | False =>
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_not_owner};
        msgs = one_msg msg;
        send msgs
    | True =>
        pos_to_fish <- __pos_to_fish;
        pos_to_bait <- __pos_to_bait;
        ocean_size <- __ocean_size;
        random_cell = get_random_empty_cell pos_to_fish pos_to_bait ocean_size ocean_size seed;
        match random_cell with
        | Some random_cell_v =>
            pos_x = pair_1st random_cell_v;
            pos_y = pair_2nd random_cell_v;
            comb_pos = get_comb_pos pos_x pos_y;

            pos_to_bait = builtin put pos_to_bait comb_pos bait_size;
            __pos_to_bait := pos_to_bait;

            msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_set_bait};
            msgs = one_msg msg;
            send msgs
        | None =>
            msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_unknown_error};
            msgs = one_msg msg;
            send msgs
        end
    end
end

transition buyFish (seed: Uint128)
    fish_price <- __fish_price;
    is_valid_amount = builtin eq _amount fish_price;

    match is_valid_amount with
    | False =>
        error_count <- __error_count;
        temp = builtin add error_count const_one;
        __error_count := temp;
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_invalid_amount};
        msgs = one_msg msg;
        send msgs
    | True =>
        accept;

        total_fish_no <- __total_fish_no;
        new_total_fish_no = builtin add total_fish_no const_one;
        __total_fish_no := new_total_fish_no;

        active_fish_no <- __active_fish_no;
        active_fish_no = builtin add active_fish_no const_one;
        __active_fish_no := active_fish_no;

        fish_to_player <- __fish_to_player;
        fish_to_player = builtin put fish_to_player new_total_fish_no _sender;
        __fish_to_player := fish_to_player;

        fish_to_weight <- __fish_to_weight;
        fish_to_weight = builtin put fish_to_weight new_total_fish_no default_fish_weight;
        __fish_to_weight := fish_to_weight;

        pos_to_fish <- __pos_to_fish;
        pos_to_bait <- __pos_to_bait;
        ocean_size <- __ocean_size;
        random_cell = get_random_empty_cell pos_to_fish pos_to_bait ocean_size ocean_size seed;
        match random_cell with
        | Some random_cell_v =>
            pos_x = pair_1st random_cell_v;
            pos_y = pair_2nd random_cell_v;
            comb_pos = get_comb_pos pos_x pos_y;

            fish_to_posx <- __fish_to_posx;
            fish_to_posx = builtin put fish_to_posx new_total_fish_no pos_x;
            __fish_to_posx := fish_to_posx;

            fish_to_posy <- __fish_to_posy;
            fish_to_posy = builtin put fish_to_posy new_total_fish_no pos_y;
            __fish_to_posy := fish_to_posy;

            pos_to_fish = builtin put pos_to_fish comb_pos new_total_fish_no;
            __pos_to_fish := pos_to_fish;

            player_to_fish <- __player_to_fish;
            player_to_fish = builtin put player_to_fish _sender new_total_fish_no;
            __player_to_fish := player_to_fish;

            msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_buy_fish};
            msgs = one_msg msg;
            send msgs
        | None =>
            msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_unknown_error};
            msgs = one_msg msg;
            send msgs
        end
    end
end

transition moveFish (new_fish_x : Uint128, new_fish_y : Uint128, seed: Uint128)
    player_to_fish <- __player_to_fish;
    fish_num = builtin get player_to_fish _sender;

    (* check if player has fish *)
    match fish_num with
    | None =>
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_fish_not_exist};
        msgs = one_msg msg;
        send msgs

    | Some fish_num_v =>
        fish_to_weight <- __fish_to_weight;
        fish_weight = builtin get fish_to_weight fish_num_v;

        (* check if fish has weight *)
        match fish_weight with
        | None =>
            msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_fish_not_exist};
            msgs = one_msg msg;
            send msgs
        | Some fish_weight_v =>
            fish_to_posx <- __fish_to_posx;
            fish_x = builtin get fish_to_posx fish_num_v;

            (* check if fish has pos_x *)
            match fish_x with
            | None =>
                msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_fish_not_exist};
                msgs = one_msg msg;
                send msgs
            | Some fish_x_v =>
                fish_to_posy <- __fish_to_posy;
                fish_y = builtin get fish_to_posy fish_num_v;

                (* check if fish has pos_y *)
                match fish_y with
                | None =>
                    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_fish_not_exist};
                    msgs = one_msg msg;
                    send msgs
                | Some fish_y_v =>
                    diff_x = abs_sub fish_x_v new_fish_x;
                    diff_y = abs_sub fish_y_v new_fish_y;
                    diff_x_sq = builtin mul diff_x diff_x;
                    diff_y_sq = builtin mul diff_y diff_y;
                    total_sq = builtin add diff_x_sq diff_y_sq;
                    max_move = get_max_move fish_weight_v;
                    max_move_sq = builtin mul max_move max_move;
                    is_in_range = gte max_move_sq total_sq;

                    ocean_size <- __ocean_size;
                    is_in_border = in_border ocean_size ocean_size new_fish_x new_fish_y;

                    is_moving = builtin lt const_zero total_sq;

                    is_valid_move = logic_and is_in_range is_in_border;
                    is_valid_move = logic_and is_valid_move is_moving;

                    (* check if the move is valid*)
                    match is_valid_move with
                    | True =>
                        new_comb_pos = get_comb_pos new_fish_x new_fish_y;
                        pos_to_fish <- __pos_to_fish;
                        other_fish = builtin get pos_to_fish new_comb_pos;

                        (* check if position is occupied*)
                        match other_fish with
                        | None =>
                        (* target cell is unoccupied *)
                            fish_to_posx = builtin put fish_to_posx fish_num_v new_fish_x;
                            __fish_to_posx := fish_to_posx;

                            fish_to_posy = builtin put fish_to_posy fish_num_v new_fish_y;
                            __fish_to_posy := fish_to_posy;

                            pos_to_fish <- __pos_to_fish;
                            old_comb_pos = get_comb_pos fish_x_v fish_y_v;
                            new_comb_pos = get_comb_pos new_fish_x new_fish_y;
                            pos_to_fish = builtin remove pos_to_fish old_comb_pos;
                            pos_to_fish = builtin put pos_to_fish new_comb_pos fish_num_v;
                            __pos_to_fish := pos_to_fish;

                            new_fish_weight = get_reduced_fish_size fish_weight_v;
                            weight_deduction = builtin sub fish_weight_v new_fish_weight;
                            acc_bait_size <- __acc_bait_size;
                            acc_bait_size = builtin add acc_bait_size weight_deduction;
                            will_distribute_bait = builtin gte acc_bait_size new_bait_size;

                            (* should distribute new bait *)
                            match will_distribute_bait with
                            | False =>
                                pos_to_bait <- __pos_to_bait;
                                bait = builtin get pos_to_bait new_comb_pos;

                                (* check if eat bait *)
                                match bait with
                                | None =>
                                    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_move_fish};
                                    msgs = one_msg msg;
                                    send msgs
                                | Some bait_v =>
                                    new_fish_weight = builtin add new_fish_weight bait_v;
                                    fish_to_weight = builtin put fish_to_weight fish_num_v new_fish_weight;
                                    __fish_to_weight := fish_to_weight;

                                    pos_to_bait = builtin remove pos_to_bait new_comb_pos;
                                    __pos_to_bait := pos_to_bait;

                                    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_move_fish};
                                    msgs = one_msg msg;
                                    send msgs
                                end

                            | True =>
                                acc_bait_size = builtin sub acc_bait_size min_bait_size;
                                __acc_bait_size := acc_bait_size;

                                pos_to_bait <- __pos_to_bait;

                                (* create bait *)
                                bait_size = min_bait_size;
                                ocean_size <- __ocean_size;
                                random_cell = get_random_empty_cell pos_to_fish pos_to_bait ocean_size ocean_size seed;
                                match random_cell with
                                | Some random_cell_v =>
                                    random_x = pair_1st random_cell_v;
                                    random_y = pair_2nd random_cell_v;
                                    random_comb_pos = get_comb_pos random_x random_y;
                                    pos_to_bait = builtin put pos_to_bait random_comb_pos bait_size;

                                    bait = builtin get pos_to_bait new_comb_pos;

                                    (* check if eat bait *)
                                    match bait with
                                    | None =>
                                        __pos_to_bait := pos_to_bait;

                                        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_move_fish};
                                        msgs = one_msg msg;
                                        send msgs
                                    | Some bait_v =>
                                        new_fish_weight = builtin add new_fish_weight bait_v;
                                        fish_to_weight = builtin put fish_to_weight fish_num_v new_fish_weight;
                                        __fish_to_weight := fish_to_weight;

                                        pos_to_bait = builtin remove pos_to_bait new_comb_pos;
                                        __pos_to_bait := pos_to_bait;

                                        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_move_fish};
                                        msgs = one_msg msg;
                                        send msgs
                                    end

                                | None =>
                                    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_unknown_error};
                                    msgs = one_msg msg;
                                    send msgs
                                end
                            end


                        | Some other_fish_num =>
                        (* Handle fish eat fish *)
                            other_fish_weight = builtin get fish_to_weight other_fish_num;
                            match other_fish_weight with
                            | None =>
                                msg = {_tag : "Main="; _recipient : _sender; _amount : Uint128 0; code : code_fish_not_exist};
                                msgs = one_msg msg;
                                send msgs
                            | Some other_fish_weight_v =>
                                other_fish_x = builtin get fish_to_posx other_fish_num;
                                match other_fish_x with
                                | None =>
                                    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_fish_not_exist};
                                    msgs = one_msg msg;
                                    send msgs
                                | Some other_fish_x_v =>
                                    other_fish_y = builtin get fish_to_posy other_fish_num;
                                    match other_fish_y with
                                    | None =>
                                        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_fish_not_exist};
                                        msgs = one_msg msg;
                                        send msgs
                                    | Some other_fish_y_v =>
                                        will_eat = gte fish_weight_v other_fish_weight_v;
                                        match will_eat with
                                        | False =>
                                        (* fish gets eaten, bigger fish gets reduced *)
                                            (* reduce bigger fish size *)
                                            new_other_fish_weight = builtin sub other_fish_weight_v fish_weight_v;
                                            fish_to_weight = builtin put fish_to_weight other_fish_num new_other_fish_weight;
                                            __fish_to_weight := fish_to_weight;

                                            (* remove this fish *)
                                            player_to_fish = builtin remove player_to_fish _sender;
                                            __player_to_fish := player_to_fish;
                                            fish_to_player <- __fish_to_player;
                                            fish_to_player = builtin remove fish_to_player fish_num_v;
                                            __fish_to_player := fish_to_player;
                                            pos_to_fish <- __pos_to_fish;
                                            old_comb_pos = get_comb_pos fish_x_v fish_y_v;
                                            pos_to_fish = builtin remove pos_to_fish old_comb_pos;
                                            __pos_to_fish := pos_to_fish;
                                            active_fish_no <- __active_fish_no;
                                            active_fish_no = builtin sub active_fish_no const_one;
                                            __active_fish_no := active_fish_no;

                                            (* create bait *)
                                            bait_size = fish_weight_v;
                                            ocean_size <- __ocean_size;
                                            seed <- __total_fish_no;
                                            pos_to_bait <- __pos_to_bait;
                                            random_cell = get_random_empty_cell pos_to_fish pos_to_bait ocean_size ocean_size seed;
                                            match random_cell with
                                            | Some random_cell_v =>
                                                random_x = pair_1st random_cell_v;
                                                random_y = pair_2nd random_cell_v;
                                                random_comb_pos = get_comb_pos random_x random_y;
                                                pos_to_bait = builtin put pos_to_bait random_comb_pos bait_size;

                                                seed = builtin add seed seed;
                                                random_cell = get_random_empty_cell pos_to_fish pos_to_bait ocean_size ocean_size seed;
                                                match random_cell with
                                                | Some random_cell_v =>
                                                    random_x = pair_1st random_cell_v;
                                                    random_y = pair_2nd random_cell_v;
                                                    random_comb_pos = get_comb_pos random_x random_y;
                                                    pos_to_bait = builtin put pos_to_bait random_comb_pos bait_size;
                                                    __pos_to_bait := pos_to_bait;

                                                    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_fish_eaten};
                                                    msgs = one_msg msg;
                                                    send msgs
                                                | None =>
                                                    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_unknown_error};
                                                    msgs = one_msg msg;
                                                    send msgs
                                                end
                                            | None =>
                                                msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_unknown_error};
                                                msgs = one_msg msg;
                                                send msgs
                                            end
                                        | True =>
                                        (* consume the other fish*)
                                            fish_to_player <- __fish_to_player;
                                            other_player = builtin get fish_to_player other_fish_num;
                                            match other_player with
                                            | None =>
                                                msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_fish_not_exist};
                                                msgs = one_msg msg;
                                                send msgs
                                            | Some other_player_v =>
                                                (* remove the other fish*)
                                                player_to_fish = builtin remove player_to_fish other_player_v;
                                                __player_to_fish := player_to_fish;
                                                fish_to_player = builtin remove fish_to_player other_fish_num;
                                                __fish_to_player := fish_to_player;
                                                active_fish_no <- __active_fish_no;
                                                active_fish_no = builtin sub active_fish_no const_one;
                                                __active_fish_no := active_fish_no;

                                                (* fish gains weight *)
                                                new_fish_weight = builtin add other_fish_weight_v fish_weight_v;
                                                fish_to_weight = builtin put fish_to_weight fish_num_v new_fish_weight;
                                                __fish_to_weight := fish_to_weight;

                                                (* move fish to new position *)
                                                fish_to_posx = builtin put fish_to_posx fish_num_v new_fish_x;
                                                __fish_to_posx := fish_to_posx;
                                                fish_to_posy = builtin put fish_to_posy fish_num_v new_fish_y;
                                                __fish_to_posy := fish_to_posy;
                                                pos_to_fish <- __pos_to_fish;
                                                old_comb_pos = get_comb_pos fish_x_v fish_y_v;
                                                new_comb_pos = get_comb_pos new_fish_x new_fish_y;
                                                pos_to_fish = builtin remove pos_to_fish old_comb_pos;
                                                pos_to_fish = builtin put pos_to_fish new_comb_pos fish_num_v;
                                                __pos_to_fish := pos_to_fish;

                                                msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_eat_fish};
                                                msgs = one_msg msg;
                                                send msgs
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    | False =>
                        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : code_invalid_move};
                        msgs = one_msg msg;
                        send msgs
                    end
                end
            end
        end
    end
end

